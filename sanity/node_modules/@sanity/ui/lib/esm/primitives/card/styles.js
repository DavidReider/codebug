import { css } from "styled-components";
import { _colorVarsStyle } from "../../styles/colorVars";
import { focusRingBorderStyle, focusRingStyle } from "../../styles/focusRing";
function cardStyle(props) {
  return [cardBaseStyle, cardColorStyle(props)];
}
function cardBaseStyle() {
  return css`
    &[data-as='button'] {
      -webkit-font-smoothing: inherit;
      appearance: none;
      outline: none;
      font: inherit;
      text-align: inherit;
      border: 0;
      width: stretch;
    }

    /* &:is(a) */
    &[data-as='a'] {
      text-decoration: none;
    }

    /* &:is(pre) */
    &[data-as='pre'] {
      font: inherit;
    }
  `;
}
function cardColorStyle(props) {
  var _a, _b;
  const { $focusRing, theme } = props;
  const { focusRing } = theme.sanity;
  const { base, card } = theme.sanity.color;
  const border = { width: 0, color: "var(--card-border-color)" };
  return css`
    ${_colorVarsStyle(base, card.enabled)}

    background-color: var(--card-bg-color);
    color: var(--card-fg-color);

    /* &:is(button) */
    &[data-as='button'] {
      &:disabled {
        ${_colorVarsStyle(base, card.disabled)}
      }

      &[data-selected] {
        ${_colorVarsStyle(base, card.pressed)}
      }

      &:not(:disabled) {
        @media (hover: hover) {
          &:hover {
            ${_colorVarsStyle(base, card.hovered)}
          }

          &:active {
            ${_colorVarsStyle(base, card.pressed)}
          }
        }

        &:focus {
          box-shadow: ${$focusRing ? focusRingStyle({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          box-shadow: ${$focusRing ? focusRingBorderStyle(border) : void 0};
        }

        &[data-selected],
        &[aria-pressed='true'],
        [aria-selected='true'] > & {
          ${_colorVarsStyle(base, card.selected)}
        }
      }
    }

    /* &:is(a) */
    &[data-as='a'] {
      &[data-disabled] {
        ${_colorVarsStyle(base, card.disabled)}
      }

      &[data-selected] {
        ${_colorVarsStyle(base, card.pressed)}
      }

      &:not([data-disabled]) {
        @media (hover: hover) {
          outline: none;

          &:hover {
            ${_colorVarsStyle(base, card.hovered)}
          }

          &:active {
            ${_colorVarsStyle(base, card.pressed)}
          }
        }

        &:focus {
          box-shadow: ${$focusRing ? focusRingStyle({ base, border, focusRing }) : void 0};
        }

        &:focus:not(:focus-visible) {
          box-shadow: ${$focusRing ? focusRingBorderStyle(border) : void 0};
        }

        [aria-selected='true'] > & {
          ${_colorVarsStyle(base, card.selected)}
        }
      }
    }

    ${(_b = (_a = theme.sanity.styles) == null ? void 0 : _a.card) == null ? void 0 : _b.root}
  `;
}
export {
  cardBaseStyle,
  cardColorStyle,
  cardStyle
};
