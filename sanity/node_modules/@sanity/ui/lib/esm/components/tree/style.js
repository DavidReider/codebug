import { css } from "styled-components";
import { rem } from "../../styles";
import { _colorVarsStyle } from "../../styles/colorVars";
function treeItemRootStyle() {
  return css`
    &[role='none'] > [role='treeitem'] {
      outline: none;
      cursor: default;
      border-radius: 3px;

      &:focus {
        position: relative;
      }
    }

    &[role='treeitem'] {
      outline: none;

      & > div {
        cursor: default;
        border-radius: 3px;
      }

      &:focus > div {
        position: relative;
      }
    }
  `;
}
function treeItemRootColorStyle(props) {
  const { theme } = props;
  const { base, card } = theme.sanity.color;
  return css`
    ${_colorVarsStyle(base, card.enabled)}

    &[data-selected] {
      ${_colorVarsStyle(base, card.pressed)}
    }

    &[role='none'] > [role='treeitem'] {
      background-color: var(--card-bg-color);
      color: var(--treeitem-fg-color);

      &:not(:focus):hover {
        ${_colorVarsStyle(base, card.hovered)}
      }

      &:focus {
        ${_colorVarsStyle(base, card.selected)}
      }
    }

    &[role='treeitem'] {
      & > div {
        background-color: var(--card-bg-color);
        color: var(--card-fg-color);
      }

      &:not(:focus) > div:hover {
        ${_colorVarsStyle(base, card.hovered)}
      }

      &:focus > div {
        ${_colorVarsStyle(base, card.selected)}
      }
    }
  `;
}
function treeItemBoxStyle(props) {
  const { $level, theme } = props;
  const { space } = theme.sanity;
  return css`
    padding-left: ${rem(space[2] * $level)};

    &[data-as='a'] {
      text-decoration: none;
    }
  `;
}
export {
  treeItemBoxStyle,
  treeItemRootColorStyle,
  treeItemRootStyle
};
