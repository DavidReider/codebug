"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UnauthorizedUser;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Dialog = (0, _styledComponents.default)(_ui.Dialog)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* @todo: Temp solution. Update sanity/ui with option to hide close button */\n  [aria-label='Close dialog'] {\n    display: none;\n  }\n"])));

function handleLogout() {
  _user.default.actions.logout();
}

function UnauthorizedUser(props) {
  return /*#__PURE__*/_react.default.createElement(Dialog, {
    header: "Unauthorized",
    width: 1,
    cardShadow: 2,
    footer: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      text: "Logout",
      onClick: handleLogout,
      style: {
        width: '100%'
      }
    }))
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    paddingX: 4,
    paddingY: 5
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "You are not authorized to access this studio. Maybe you could ask someone to invite you to collaborate on this project?"), /*#__PURE__*/_react.default.createElement(_ui.Text, null, "If you think this is an error, verify that you are logged in with the correct account. You are currently logged in as", ' ', /*#__PURE__*/_react.default.createElement("span", null, props.user.name, " (", props.user.email, ")")))));
}

UnauthorizedUser.propTypes = {
  user: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    email: _propTypes.default.string.isRequired
  })
};