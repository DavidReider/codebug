"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ErrorDialog;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _CorsCheck = _interopRequireDefault(require("./CorsCheck"));

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Dialog = (0, _styledComponents.default)(_ui.Dialog)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* @todo: Temp solution. Update sanity/ui with option to hide close button */\n  [aria-label='Close dialog'] {\n    display: none;\n  }\n"])));

function ErrorDialog(props) {
  var isNetworkError = props.error.isNetworkError;
  return /*#__PURE__*/_react.default.createElement(Dialog, {
    header: "Error",
    cardShadow: 2,
    width: 1,
    footer: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      text: "Retry",
      onClick: props.onRetry,
      style: {
        width: '100%'
      }
    }))
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, !isNetworkError && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    accent: true
  }, props.error.message), isNetworkError && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    accent: true
  }, "An error occurred while attempting to reach the Sanity API."), /*#__PURE__*/_react.default.createElement(_CorsCheck.default, null))));
}

ErrorDialog.propTypes = {
  error: _propTypes.default.shape({
    isNetworkError: _propTypes.default.bool,
    message: _propTypes.default.string.isRequired
  }).isRequired,
  onRetry: _propTypes.default.func.isRequired
};