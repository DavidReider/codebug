"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _cancelWrap = _interopRequireDefault(require("./cancelWrap"));

var _legacyParts = require("./legacyParts");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Dialog = (0, _styledComponents.default)(_ui.Dialog)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  var hideClose = _ref.hideClose;
  return hideClose && (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      /* @todo: Temp solution. Update sanity/ui with option to hide close button */\n      [aria-label='Close dialog'] {\n        display: none;\n      }\n    "])));
});

class LoginDialog extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      providers: [],
      isLoaded: false,
      shouldRedirect: false,
      error: null
    });

    _defineProperty(this, "handleLoginButtonClicked", (provider, evnt) => {
      evnt.preventDefault();
      this.redirectToProvider(provider);
    });

    _defineProperty(this, "handleErrorDialogClosed", () => {
      this.setState({
        error: null
      });
    });
  }

  componentDidMount() {
    this.getProviders = (0, _cancelWrap.default)(_legacyParts.authenticationFetcher.getProviders());
    this.getProviders.promise.then(providers => this.setState({
      providers: providers,
      isLoaded: true,
      shouldRedirect: providers.length === 1 && _legacyParts.pluginConfig.providers.redirectOnSingle
    })).catch(err => this.setState({
      error: err
    }));
  }

  componentWillUnmount() {
    this.getProviders.cancel();
  }

  componentDidUpdate() {
    var _this$state = this.state,
        providers = _this$state.providers,
        isLoaded = _this$state.isLoaded,
        shouldRedirect = _this$state.shouldRedirect;

    if (isLoaded && shouldRedirect) {
      this.redirectToProvider(providers[0]);
    }
  }

  redirectToProvider(provider) {
    var projectId = this.props.projectId;
    var currentUrl = encodeURIComponent(window.location.toString());
    var params = ["origin=".concat(currentUrl), projectId && "projectId=".concat(projectId)].filter(Boolean);

    if (provider.custom && !provider.supported && !this.state.error) {
      this.setState({
        error: {
          message: 'This project is missing the required "thirdPartyLogin" ' + 'feature to support custom logins.',
          link: (0, _generateHelpUrl.default)('third-party-login'),
          hideClose: true
        }
      });
      return;
    }

    if (!this.state.error) {
      window.location = "".concat(provider.url, "?").concat(params.join('&'));
    }
  }

  render() {
    var _this$state2 = this.state,
        error = _this$state2.error,
        providers = _this$state2.providers,
        isLoaded = _this$state2.isLoaded,
        shouldRedirect = _this$state2.shouldRedirect;
    var _this$props = this.props,
        title = _this$props.title,
        description = _this$props.description,
        SanityLogo = _this$props.SanityLogo;

    if (error) {
      return /*#__PURE__*/_react.default.createElement(Dialog, {
        header: "Error",
        width: 5,
        onClose: error !== null && error !== void 0 && error.hideClose ? undefined : this.handleErrorDialogClosed,
        onClickOutside: error !== null && error !== void 0 && error.hideClose ? undefined : this.handleErrorDialogClosed,
        cardShadow: 2
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
        space: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, error === null || error === void 0 ? void 0 : error.message), (error === null || error === void 0 ? void 0 : error.link) && /*#__PURE__*/_react.default.createElement(_ui.Text, null, /*#__PURE__*/_react.default.createElement("a", {
        href: error.link
      }, "Read more")))));
    }

    if (isLoaded && (providers === null || providers === void 0 ? void 0 : providers.length) === 0) {
      return /*#__PURE__*/_react.default.createElement(_ui.Container, {
        padding: 4,
        width: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "No providers configured"));
    }

    if (isLoaded && !shouldRedirect) {
      return /*#__PURE__*/_react.default.createElement(Dialog, {
        header: "Sign in",
        width: 1,
        cardShadow: 2,
        hideClose: true
      }, /*#__PURE__*/_react.default.createElement(_legacyParts.LoginDialogContent, {
        title: title,
        description: description,
        providers: providers,
        SanityLogo: SanityLogo,
        onLoginButtonClick: this.handleLoginButtonClicked
      }));
    }

    return null;
  }

}

exports.default = LoginDialog;

_defineProperty(LoginDialog, "propTypes", {
  title: _propTypes.default.node.isRequired,
  description: _propTypes.default.node,
  projectId: _propTypes.default.string,
  SanityLogo: _propTypes.default.func
});

_defineProperty(LoginDialog, "defaultProps", {
  description: null,
  projectId: null,
  SanityLogo: null
});