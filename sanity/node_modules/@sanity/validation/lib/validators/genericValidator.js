"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _typeOfIs = _interopRequireDefault(require("type-of-is"));

var _deepEquals = _interopRequireDefault(require("../util/deepEquals"));

var _pathToString = _interopRequireDefault(require("../util/pathToString"));

var _handleValidationResult = _interopRequireDefault(require("../util/handleValidationResult"));

var _ValidationError = _interopRequireDefault(require("../ValidationError"));

var _validate = _interopRequireDefault(require("../validate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var SLOW_VALIDATOR_TIMEOUT = 5000;

var type = (expected, value, message) => {
  var actualType = _typeOfIs.default.string(value);

  if (actualType !== expected && actualType !== 'undefined') {
    return new _ValidationError.default(message || "Expected type \"".concat(expected, "\", got \"").concat(actualType, "\""));
  }

  return true;
};

var presence = (expected, value, message) => {
  if (typeof value === 'undefined' && expected === 'required') {
    return new _ValidationError.default(message || 'Value is required');
  }

  return true;
};

var multiple = (children, value) => {
  var items = children.map(child => (0, _validate.default)(child, value, {
    isChild: true
  }));
  return Promise.all(items).then(_flatten2.default);
};

var all = (children, value, message) => multiple(children, value).then(results => {
  var numErrors = results.length;
  return numErrors === 0 ? true : formatValidationErrors(message, results, {
    separator: ' - AND - ',
    operator: 'AND'
  });
});

var either = (children, value, message) => multiple(children, value).then(results => {
  var numErrors = results.length; // Read: There is at least one rule that matched

  return numErrors < children.length ? true : formatValidationErrors(message, results, {
    separator: ' - OR - ',
    operator: 'OR'
  });
});

var valid = (allowedValues, actual, message) => {
  var valueType = typeof actual;

  if (valueType === 'undefined') {
    return true;
  }

  var value = (valueType === 'number' || valueType === 'string') && "".concat(actual);
  var strValue = value && value.length > 30 ? "".concat(value.slice(0, 30), "\u2026") : value;
  var defaultMessage = value ? "Value \"".concat(strValue, "\" did not match any allowed values") : 'Value did not match any allowed values';
  return allowedValues.some(expected => (0, _deepEquals.default)(expected, actual)) ? true : new _ValidationError.default(message || defaultMessage);
};

var custom = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (fn, value, message, options) {
    var slowTimer = setTimeout(() => {
      var path = (0, _pathToString.default)(options.path); // eslint-disable-next-line no-console

      console.warn("Custom validator at ".concat(path, " has taken more than ").concat(SLOW_VALIDATOR_TIMEOUT, "ms to respond"));
    }, SLOW_VALIDATOR_TIMEOUT);
    var result;

    try {
      result = yield fn(value, options);
    } catch (err) {
      var path = (0, _pathToString.default)(options.path);
      err.message = "".concat(path, ": Error validating value: ").concat(err.message);
      throw err;
    }

    clearTimeout(slowTimer);
    return (0, _handleValidationResult.default)(result, message, options);
  });

  return function custom(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

function formatValidationErrors(message, results) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var errOpts = {
    children: results.length > 1 ? results : undefined,
    operator: options.operator
  };
  return results.length === 1 ? new _ValidationError.default(message || results[0].item.message, errOpts) : new _ValidationError.default(message || "[".concat(results.map(err => err.item.message).join(options.separator), "]"), errOpts);
}

var _default = {
  all,
  type,
  either,
  valid,
  custom,
  presence
};
exports.default = _default;