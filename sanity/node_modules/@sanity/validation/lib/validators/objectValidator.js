"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ValidationError = _interopRequireDefault(require("../ValidationError"));

var _pathToString = _interopRequireDefault(require("../util/pathToString"));

var _handleValidationResult = _interopRequireDefault(require("../util/handleValidationResult"));

var _genericValidator = _interopRequireDefault(require("./genericValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var metaKeys = ['_key', '_type', '_weak'];

var presence = (expected, value, message) => {
  if (expected !== 'required') {
    return true;
  }

  var keys = value && Object.keys(value).filter(key => !metaKeys.includes(key));

  if (typeof value === 'undefined' || keys && keys.length === 0) {
    return new _ValidationError.default(message || 'Required');
  }

  return true;
};

var reference = (unused, value, message) => {
  if (!value) {
    return true;
  }

  if (typeof value._ref !== 'string') {
    return new _ValidationError.default(message || 'Must be a reference to a document', {
      paths: ['$']
    });
  }

  return true;
};

var block = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (validateBlock, value, message, options) {
    var result;

    try {
      result = yield validateBlock(value, options);
    } catch (err) {
      var path = (0, _pathToString.default)(options.path);
      err.message = "".concat(path, ": Error validating value: ").concat(err.message);
      throw err;
    }

    return (0, _handleValidationResult.default)(result, message, options);
  });

  return function block(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var assetRequired = (flag, value, message) => {
  if (!value || !value.asset || !value.asset._ref) {
    var assetType = flag.assetType || 'Asset';
    return new _ValidationError.default(message || "".concat(assetType, " required"));
  }

  return true;
};

var _default = Object.assign({}, _genericValidator.default, {
  presence,
  reference,
  block,
  assetRequired
});

exports.default = _default;