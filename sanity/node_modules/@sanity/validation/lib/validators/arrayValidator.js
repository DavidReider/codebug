"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepEquals = _interopRequireDefault(require("../util/deepEquals"));

var _ValidationError = _interopRequireDefault(require("../ValidationError"));

var _genericValidator = _interopRequireDefault(require("./genericValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var min = (minLength, value, message) => {
  if (!value || value.length >= minLength) {
    return true;
  }

  return new _ValidationError.default(message || "Must have at least ".concat(minLength, " items"));
};

var max = (maxLength, value, message) => {
  if (!value || value.length <= maxLength) {
    return true;
  }

  return new _ValidationError.default(message || "Must have at most ".concat(maxLength, " items"));
};

var length = (wantedLength, value, message) => {
  if (!value || value.length === wantedLength) {
    return true;
  }

  return new _ValidationError.default(message || "Must have exactly ".concat(wantedLength, " items"));
};

var presence = (flag, value, message) => {
  if (flag === 'required' && !value) {
    return new _ValidationError.default(message || 'Required');
  }

  return true;
};

var valid = (allowedValues, values, message) => {
  var valueType = typeof values;

  if (valueType === 'undefined') {
    return true;
  }

  var paths = [];

  var _loop = function _loop(i) {
    var value = values[i];

    if (allowedValues.some(expected => (0, _deepEquals.default)(expected, value))) {
      return "continue";
    }

    var pathSegment = value && value._key ? {
      _key: value._key
    } : i;
    paths.push([pathSegment]);
  };

  for (var i = 0; i < values.length; i++) {
    var _ret = _loop(i);

    if (_ret === "continue") continue;
  }

  return paths.length === 0 ? true : new _ValidationError.default(message || 'Value did not match any allowed values', {
    paths
  });
};

var unique = (flag, value, message) => {
  var dupeIndices = [];

  if (!value) {
    return true;
  }
  /* eslint-disable max-depth */


  for (var x = 0; x < value.length; x++) {
    for (var y = x + 1; y < value.length; y++) {
      var itemA = value[x];
      var itemB = value[y];

      if (!(0, _deepEquals.default)(itemA, itemB)) {
        continue;
      }

      if (dupeIndices.indexOf(x) === -1) {
        dupeIndices.push(x);
      }

      if (dupeIndices.indexOf(y) === -1) {
        dupeIndices.push(y);
      }
    }
  }
  /* eslint-enable max-depth */


  var paths = dupeIndices.map(idx => {
    var item = value[idx];
    var pathSegment = item && item._key ? {
      _key: item._key
    } : idx;
    return [pathSegment];
  });
  return dupeIndices.length > 0 ? new _ValidationError.default(message || "Can't be a duplicate", {
    paths
  }) : true;
};

var _default = Object.assign({}, _genericValidator.default, {
  presence,
  unique,
  length,
  valid,
  min,
  max
});

exports.default = _default;