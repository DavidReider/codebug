declare var _default: {
    all: (children: any, value: any, message: any) => Promise<true | ValidationError>;
    type: (expected: any, value: any, message: any) => true | ValidationError;
    either: (children: any, value: any, message: any) => Promise<true | ValidationError>;
    valid: (allowedValues: any, actual: any, message: any) => true | ValidationError;
    custom: (fn: any, value: any, message: any, options: any) => Promise<true | any[] | ValidationError>;
    presence: (expected: any, value: any, message: any) => true | ValidationError;
} & {
    presence: (flag: any, value: any, message: any) => true | ValidationError;
    unique: (flag: any, value: any, message: any) => true | ValidationError;
    length: (wantedLength: any, value: any, message: any) => true | ValidationError;
    valid: (allowedValues: any, values: any, message: any) => true | ValidationError;
    min: (minLength: any, value: any, message: any) => true | ValidationError;
    max: (maxLength: any, value: any, message: any) => true | ValidationError;
};
export default _default;
import ValidationError from "../ValidationError";
//# sourceMappingURL=arrayValidator.d.ts.map